// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	entities "gongo/entities"

	mock "github.com/stretchr/testify/mock"
)

// IProduceService is an autogenerated mock type for the IProduceService type
type IProduceService struct {
	mock.Mock
}

// AddProduce provides a mock function with given fields: produce
func (_m *IProduceService) AddProduce(produce *entities.Produce) (interface{}, error) {
	ret := _m.Called(produce)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*entities.Produce) interface{}); ok {
		r0 = rf(produce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Produce) error); ok {
		r1 = rf(produce)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduce provides a mock function with given fields: produceCode
func (_m *IProduceService) DeleteProduce(produceCode string) (*int64, error) {
	ret := _m.Called(produceCode)

	var r0 *int64
	if rf, ok := ret.Get(0).(func(string) *int64); ok {
		r0 = rf(produceCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(produceCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduce provides a mock function with given fields:
func (_m *IProduceService) GetProduce() (*[]entities.Produce, error) {
	ret := _m.Called()

	var r0 *[]entities.Produce
	if rf, ok := ret.Get(0).(func() *[]entities.Produce); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Produce)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduceByProduceCode provides a mock function with given fields: code
func (_m *IProduceService) GetProduceByProduceCode(code string) (*entities.Produce, error) {
	ret := _m.Called(code)

	var r0 *entities.Produce
	if rf, ok := ret.Get(0).(func(string) *entities.Produce); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Produce)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
