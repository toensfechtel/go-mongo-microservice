// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package mock_services is a generated GoMock package.
package services

import (
        entities "gongo/entities"
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
)

// MockIProduceService is a mock of IProduceService interface.
type MockIProduceService struct {
        ctrl     *gomock.Controller
        recorder *MockIProduceServiceMockRecorder
}

// MockIProduceServiceMockRecorder is the mock recorder for MockIProduceService.
type MockIProduceServiceMockRecorder struct {
        mock *MockIProduceService
}

// NewMockIProduceService creates a new mock instance.
func NewMockIProduceService(ctrl *gomock.Controller) *MockIProduceService {
        mock := &MockIProduceService{ctrl: ctrl}
        mock.recorder = &MockIProduceServiceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProduceService) EXPECT() *MockIProduceServiceMockRecorder {
        return m.recorder
}

// AddProduce mocks base method.
func (m *MockIProduceService) AddProduce(produce *entities.Produce) *interface{} {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "AddProduce", produce)
        ret0, _ := ret[0].(*interface{})
        return ret0
}

// AddProduce indicates an expected call of AddProduce.
func (mr *MockIProduceServiceMockRecorder) AddProduce(produce interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduce", reflect.TypeOf((*MockIProduceService)(nil).AddProduce), produce)
}

// DeleteProduce mocks base method.
func (m *MockIProduceService) DeleteProduce(produceCode string) *int64 {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteProduce", produceCode)
        ret0, _ := ret[0].(*int64)
        return ret0
}

// DeleteProduce indicates an expected call of DeleteProduce.
func (mr *MockIProduceServiceMockRecorder) DeleteProduce(produceCode interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduce", reflect.TypeOf((*MockIProduceService)(nil).DeleteProduce), produceCode)
}

// GetProduce mocks base method.
func (m *MockIProduceService) GetProduce(produceCode string) *[]entities.Produce {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetProduce", produceCode)
        ret0, _ := ret[0].(*[]entities.Produce)
        return ret0
}

// GetProduce indicates an expected call of GetProduce.
func (mr *MockIProduceServiceMockRecorder) GetProduce(produceCode interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduce", reflect.TypeOf((*MockIProduceService)(nil).GetProduce), produceCode)
}
